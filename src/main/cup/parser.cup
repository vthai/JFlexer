package org.ifn660.jflexer;

import java_cup.runtime.*;
import org.ifn660.jflexer.ast.*;
import java.util.ArrayList;
import java.util.List;



/* Symbol lists
These declarations name and supply an object type for each terminal and non-terminal symbol that appears in the grammar
Terminals are returned by the scanner and placed on the parse stack
Non-terminals replace a series of Symbol objects on the parse stack when the RHS of a production is recognised
*/

parser code 
{:
	public Node root;
:}

terminal        String INT; 
terminal        BOOLEAN, CHAR, CONST, DOUBLE, FLOAT, LONG, SHORT;
terminal        CLASS, SUPER, INTERFACE, EXTENDS, IMPLEMENTS;
terminal        String VOID;
terminal        NULL;
terminal        IF, ELSE, DO, WHILE, FOR, CASE, SWITCH, BREAK;
terminal        RETURN;
terminal        String PUBLIC, PRIVATE, PROTECTED, ABSTRACT, STRICTFP, FINAL, STATIC;
terminal        ASSERT, BYTE;
terminal        CONTINUE, DEFAULT, ENUM, FINALLY, GOTO;
terminal        IMPORT, INSTANCEOF, NATIVE, NEW, PACKAGE;
terminal        SYNCHRONIZED, THIS, TRANSIENT, VOLATILE;
terminal        CATCH, TRY, THROW, THROWS;
terminal        String IDENTIFIER;
terminal        OP_EQ, OP_GT, OP_LT, OP_NOT_EQ, OP_UNARY, OP_TERNARY, OP_LOOP_IN, OP_LAMBDA, 
                OP_EQ_EQ, OP_GT_EQ, OP_LT_EQ, OP_LOGIC_AND, OP_LOGIC_OR, OP_POS_INCR, 
                OP_NEG_INCR, OP_PLUS, OP_MINUS, OP_MULTIPLY, OP_DIVIDE, OP_AND, OP_OR, OP_XOR, 
                OP_MODULUS, OP_BIT_L_SHIFT, OP_BIT_R_SHIFT, OP_UNSIGN_R_SHIFT, OP_ADD_AND, OP_MINUS_AND, 
                OP_MULTIPLY_AND, OP_DIVIDE_AND, OP_BIT_AND, OP_BIT_INCL_OR, OP_BIT_EXCL_OR, 
                OP_MODULUS_AND, OP_L_SHIFT_AND, OP_R_SHIFT_AND, OP_UNSIGN_R_SHIFT_AND;
terminal        INTEGER_LITERAL, STRING_LITERAL;
terminal        LPAREN, RPAREN, LBRACE, RBRACE, LBRACK, RBRACK, SEMICOLON, COMMA, DOT;
terminal        UNKNOWN;

nonterminal      Node CompilationUnit, TypeDeclaration_opt, TypeDeclaration, ClassDeclaration;
nonterminal      Node NormalClassDeclaration;
nonterminal      ClassBody ClassBody, ClassBodyDeclaration, ClassBodyDeclaration_opt;
nonterminal      List<String> ClassModifier_opt;
nonterminal      Type Result;
nonterminal      String ClassModifier;
nonterminal      TempWrapper VariableDeclaratorList, VariableDeclarator; 
nonterminal      VariableDeclarator_opt;
nonterminal      VariableInitializer_opt, VariableInitializer;
nonterminal      Dims_opt, Dims;
nonterminal      MethodDeclaration MethodDeclaration, ClassMemberDeclaration;
nonterminal      List<String> MethodModifier_opt;
nonterminal      String MethodModifier;
nonterminal      TempWrapper MethodHeader;
nonterminal      MethodBody MethodBody;
nonterminal      TempWrapper MethodDeclarator; 
nonterminal      List<Parameter> FormalParameterList_opt, FormalParameterList;
nonterminal      Parameter LastFormalParameter;
nonterminal      Parameter FormalParameter;
nonterminal      List<Statement> Block, BlockStatements, BlockStatement_opt; 
nonterminal      Statement BlockStatement;
nonterminal      LocalVariableDeclarationStatement LocalVariableDeclarationStatement, LocalVariableDeclaration;
nonterminal      Type UnannType; 
nonterminal      Type UnannPrimitiveType; 
nonterminal      Type UnannReferenceType; 
nonterminal      ElementType UnannClassOrInterfaceType, UnannClassType, UnannArrayType;
nonterminal      Type NumericType, IntegralType, FloatingPointType;
nonterminal      IdentifierNode Identifier, VariableDeclaratorId;
nonterminal      Literal;
nonterminal      PrimaryNoNewArray, Primary, PostfixExpression, UnaryExpressionNotPlusMinus;
nonterminal      UnaryExpression, MultiplicativeExpression, AdditiveExpression, ShiftExpression;
nonterminal      RelationalExpression, EqualityExpression, AndExpression, ExclusiveOrExpression;
nonterminal      InclusiveOrExpression, ConditionalAndExpression, ConditionalOrExpression;
nonterminal      ConditionalExpression, AssignmentExpression, Expression;
nonterminal      PackageDelcaration_opt, PackageDelcaration, ImportDeclaration_opt, ImportDeclaration;
nonterminal      TypeParameters_opt, TypeParameters, Superclass_opt, Superclass, Superinterfaces_opt, Superinterfaces;
nonterminal      Throws_opt, Throws, VariableModifier_opt, VariableModifier, TypeArguments_opt, TypeArguments;
nonterminal      PreIncrementExpression, PreDecrementExpression;
nonterminal      ExpressionName, PostIncrementExpression, PostDecrementExpression, ArrayCreationExpression;
nonterminal		 CastExpression, AmbiguousName;

/* Compilation related grammar */

CompilationUnit             ::= PackageDelcaration_opt ImportDeclaration_opt TypeDeclaration_opt;

PackageDelcaration_opt      ::= PackageDelcaration
                            | /* empty */
                            ;

ImportDeclaration_opt       ::= ImportDeclaration_opt ImportDeclaration
                            | /* empty */
                            ;

TypeDeclaration_opt         ::= TypeDeclaration_opt TypeDeclaration 
                            | /* empty */
                            ;

TypeDeclaration             ::= ClassDeclaration;

ClassDeclaration            ::= NormalClassDeclaration;

NormalClassDeclaration      ::= ClassModifier_opt:cmdOpt CLASS Identifier:i TypeParameters_opt Superclass_opt Superinterfaces_opt ClassBody:cb
							{:
								RESULT = new ClassDeclaration(i, cmdOpt, cb);
								parser.root = (Node)RESULT;
							:};

TypeParameters_opt           ::= TypeParameters
                            | /* empty */
                            ;
                               
Superclass_opt              ::= Superclass
                            | /* empty */
                            ;
                               
Superinterfaces_opt          ::= Superinterfaces
                            | /* empty */
                            ;

ClassModifier_opt           ::= ClassModifier_opt:cmdOpt ClassModifier:cm 
                            {: 
                                if (cmdOpt == null) {
                                    cmdOpt = new ArrayList<>();
                                }
                                RESULT = cmdOpt;
                                RESULT.add (cm); 
                            :}
                            | /* empty */
                            ;

ClassModifier               ::= PUBLIC:p {: RESULT = p; :} | PROTECTED:p {: RESULT = p; :} | PRIVATE:p {: RESULT = p; :} | ABSTRACT:p {: RESULT = p; :} | STATIC:s {: RESULT = (String)s; :} | FINAL:p {: RESULT = p; :} | STRICTFP:p {: RESULT = p; :};

ClassBody                   ::= LBRACE ClassBodyDeclaration_opt:cbOpt {: RESULT = cbOpt; :} RBRACE;

Identifier                  ::= IDENTIFIER:i {: RESULT = new IdentifierNode(i); :};

ClassBodyDeclaration_opt    ::= ClassBodyDeclaration_opt ClassBodyDeclaration:cb 
                            {: 
                                RESULT = cb;
                            :}
                            | /* empty */
                            ;

ClassBodyDeclaration        ::= ClassMemberDeclaration:cmd {: RESULT = new ClassBody(cmd); :};

ClassMemberDeclaration      ::= MethodDeclaration:md {: RESULT = md; :};

/* Method related grammar */

MethodDeclaration           ::= MethodModifier_opt:mmOpt MethodHeader:mh MethodBody:mb
                            {: 
                                RESULT = new MethodDeclaration(mmOpt, mh.result, mh.identifiernode, mh.parameters, mb);
                                
                            :};

MethodModifier_opt          ::= MethodModifier_opt:mmOpt MethodModifier:mm
                            {:
                                if (mmOpt == null) {
                                    mmOpt = new ArrayList<>();
                                }
                                RESULT = mmOpt;
                                RESULT.add(mm);
                            :}
                            | /* empty */
                            ;

MethodModifier              ::= PUBLIC:p {: RESULT = p; :} | PROTECTED:p {: RESULT = p; :} | PRIVATE:p {: RESULT = p; :} | ABSTRACT:p {: RESULT = p; :} | STATIC:p {: RESULT = p; :} | FINAL:p {: RESULT = p; :} | STRICTFP:p {: RESULT = p; :};

MethodHeader                ::= Result:i MethodDeclarator:md Throws_opt
                            {:
                                RESULT = new TempWrapper();
                                RESULT.result = new Result(i);
                                RESULT.identifiernode = md.identifiernode; /* TODO expand in the future */
                                RESULT.parameters = md.parameters;
                            :};

Throws_opt                  ::= Throws
                            | /* empty */
                            ;

Result                      ::= VOID:v {: RESULT = new NamedType(v); :};

MethodDeclarator            ::= Identifier:id LPAREN FormalParameterList_opt:fpl_opt RPAREN
                            {:
                                RESULT = new TempWrapper();                                
                                RESULT.identifiernode = id;
                                RESULT.parameters = fpl_opt;
                                
                            :}
                            ;

FormalParameterList_opt     ::= FormalParameterList:fpl
                            {:
                                RESULT = fpl;
                            :}
                            | /* empty */
                            ;

FormalParameterList         ::= LastFormalParameter:lfp
                            {:
                                RESULT = new ArrayList<>();
                                RESULT.add (lfp);
                            :}
                            ;

LastFormalParameter         ::= FormalParameter:fp
                            {:
                                 RESULT = fp;
                            :}
                            ;

FormalParameter             ::= VariableModifier_opt UnannType:ut VariableDeclaratorId:vdi
                            {:
                                 RESULT = new Parameter (ut, vdi);
                            :}
                            ;

VariableModifier_opt        ::= VariableModifier_opt VariableModifier
                            | /* empty */
                            ;


UnannReferenceType          ::= UnannArrayType:uat
                            {:
                                 RESULT = new ArrayType(uat);
                            :}
                            ;

UnannArrayType              ::= UnannClassOrInterfaceType:ucoit Dims
                            {:
                                 RESULT = ucoit;
                            :}
                            ;

Dims                        ::= LBRACK RBRACK;

UnannClassOrInterfaceType   ::= UnannClassType:uct
                            {:
                                 RESULT = uct;
                            :}
                            ;

UnannClassType              ::= Identifier:id TypeArguments_opt
                            {:
                                 RESULT = new ElementType(id);
                            :}
                            ;

TypeArguments_opt           ::= TypeArguments
                            | /* empty */
                            ;

/* Assignment Expression related grammar */

Expression                  ::= AssignmentExpression;

AssignmentExpression        ::= ConditionalExpression;

ConditionalExpression       ::= ConditionalOrExpression
                            | ConditionalOrExpression OP_TERNARY Expression OP_LOOP_IN ConditionalExpression;

ConditionalOrExpression     ::= ConditionalAndExpression;

ConditionalAndExpression    ::= InclusiveOrExpression;

InclusiveOrExpression       ::= ExclusiveOrExpression;

ExclusiveOrExpression       ::= AndExpression
							| ExclusiveOrExpression OP_XOR AndExpression
							;

AndExpression               ::= EqualityExpression
                            | AndExpression OP_LOGIC_AND EqualityExpression;

EqualityExpression          ::= RelationalExpression
                            | EqualityExpression OP_EQ_EQ RelationalExpression
                            | EqualityExpression OP_NOT_EQ RelationalExpression;

RelationalExpression        ::= ShiftExpression;

ShiftExpression             ::= AdditiveExpression
                            | ShiftExpression OP_BIT_L_SHIFT AdditiveExpression
                            | ShiftExpression OP_BIT_R_SHIFT AdditiveExpression
                            | ShiftExpression OP_UNSIGN_R_SHIFT AdditiveExpression;

AdditiveExpression          ::= MultiplicativeExpression
							| AdditiveExpression OP_PLUS MultiplicativeExpression
							| AdditiveExpression OP_MINUS MultiplicativeExpression
							;

MultiplicativeExpression    ::= UnaryExpression
                            |MultiplicativeExpression OP_MULTIPLY UnaryExpression
                            |MultiplicativeExpression OP_DIVIDE UnaryExpression
                            |MultiplicativeExpression OP_MODULUS UnaryExpression;

UnaryExpression             ::= PreIncrementExpression
                            | PreDecrementExpression
                            | OP_PLUS UnaryExpression
                            | OP_MINUS UnaryExpression
                            | UnaryExpressionNotPlusMinus;

UnaryExpressionNotPlusMinus ::= PostfixExpression
							| OP_UNARY UnaryExpression
							| OP_NOT_EQ UnaryExpression
							| CastExpression;

PostfixExpression           ::= Primary
                            | ExpressionName
                            | PostIncrementExpression
                            | PostDecrementExpression
                            ;

Primary                     ::= PrimaryNoNewArray
                            | ArrayCreationExpression
                            ;
                            
ExpressionName              ::= Identifier
                            | AmbiguousName DOT Identifier
                            ;
                            
AmbiguousName               ::= Identifier
                            | AmbiguousName DOT Identifier
                            ;

PrimaryNoNewArray           ::= Literal;

Literal                     ::= INTEGER_LITERAL;

/* Method body related grammar */

MethodBody                  ::= Block:b
                            {:
                                 RESULT = new MethodBody(b);
                            :}
                            ;

Block                       ::= LBRACE BlockStatements:bss RBRACE
                            {:
                                 RESULT = bss;
                            :}
                            ;

BlockStatements             ::= BlockStatement:bs BlockStatement_opt: bs_opt
                            {:
                                RESULT = new ArrayList<>();
                                RESULT.add(bs);
                                if (bs_opt != null) {
                                	RESULT.addAll(bs_opt);
                                }
                            :}
                            ;

BlockStatement_opt          ::= BlockStatement_opt:bs_opt BlockStatement:bs
                            {:
                            	if (bs_opt == null) {
                            		bs_opt = new ArrayList<>();
                            	}
                            	RESULT = bs_opt;
                                RESULT.add(bs);
                            :}
                            | /* empty */
                            ;

BlockStatement              ::= LocalVariableDeclarationStatement:lvds
                            {:
                                 RESULT = lvds;
                            :}
                            ;

LocalVariableDeclarationStatement ::= LocalVariableDeclaration:lvd SEMICOLON
                                  {:
                                       RESULT = lvd;
                                  :}
                                  ;

LocalVariableDeclaration    ::= VariableModifier_opt UnannType:ut VariableDeclaratorList:vdl
                            {:
                                 RESULT = new LocalVariableDeclarationStatement(ut, vdl.variabledeclaratorid, vdl.variableinitializer);
                            :}
                            ;

VariableDeclaratorList      ::= VariableDeclarator:vd VariableDeclarator_opt
                            {:
                                 RESULT = vd;   
                                 //RESULT = vd_opt;
                            :}
                            ;
                            
VariableDeclarator_opt      ::= COMMA VariableDeclarator_opt VariableDeclarator:vd
                            {:
                                 RESULT = vd;
                            :}
                            | /* empty */
                            ;
                            
VariableDeclarator          ::= VariableDeclaratorId:vdi VariableInitializer_opt:vi_opt
                            {:
                                 RESULT = new TempWrapper();
                                 RESULT.variabledeclaratorid = vdi;
                            :}
                            ;

VariableInitializer_opt     ::= OP_EQ VariableInitializer
                            | /* empty */
                            ;
                            
VariableDeclaratorId        ::= Identifier:id Dims_opt
                            {:
                                 RESULT = id;
                            :}
                            ;

Dims_opt                    ::= Dims
                            | /* empty */
                            ;

VariableInitializer         ::= Expression;

UnannType                   ::= UnannPrimitiveType:upt
                            {:
                                 RESULT = upt;
                            :}
                            
                            | UnannReferenceType:urt
                            {:
                                 RESULT = urt;
                            :}
                            ;

UnannPrimitiveType          ::= NumericType:nt
                            {:
                                 RESULT = nt;
                            :}
                            /*| BOOLEAN*/
                            ;

NumericType                 ::= IntegralType:it
                            {:
                                 RESULT = it;
                            :}
                            | FloatingPointType
                            ;

IntegralType                ::= INT:i
                            {:
                                 RESULT = new NamedType(i);
                            :}
                            | CHAR
                            | BYTE
                            | SHORT
                            | LONG
                            ;

FloatingPointType           ::= DOUBLE
                            | FLOAT
                            ;

