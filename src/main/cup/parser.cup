package org.ifn660.jflexer;

import java_cup.runtime.*;

terminal    INT, BOOLEAN, CHAR, CONST, DOUBLE, FLOAT, LONG, SHORT;
terminal    ABSTRACT, CLASS, SUPER, INTERFACE, EXTENDS, IMPLEMENTS;
terminal    VOID, NULL, STATIC;
terminal    IF, ELSE, DO, WHILE, FOR, CASE, SWITCH, BREAK;
terminal    RETURN;
terminal    PUBLIC, PRIVATE, PROTECTED;
terminal    ASSERT, BYTE;
terminal    CONTINUE, DEFAULT, ENUM, FINAL, FINALLY, GOTO;
terminal    IMPORT, INSTANCEOF, NATIVE, NEW, PACKAGE, STRICTFP;
terminal    SYNCHRONIZED, THIS, TRANSIENT, VOLATILE;
terminal    CATCH, TRY, THROW, THROWS;
terminal    IDENTIFIER;
terminal    EQ, EQEQ, PLUS;
terminal    INTEGER_LITERAL, STRING_LITERAL;
terminal    LPAREN, RPAREN, LBRACE, RBRACE, LBRACK, RBRACK, SEMICOLON, COMMA, DOT;
terminal    UNKNOWN;

    
nonterminal      compilationUnit, typeDeclaration, classDeclaration;
nonterminal      normalClassDeclaration, classModifiers, classModifier, classBody;
nonterminal 	  FormalParameter,UnannType,VariableDeclaratorId,UnannReferenceType,UnannArrayType,UnannClassOrInterfaceType,UnannClassType,Dims;
nonterminal      ClassBodyDeclaration,ClassMemberDeclaration,MethodDeclaration,MethodModifier,MethodHeader,MethodBody,Result,MethodDeclarator,FormalParameterList,FormalParameters;
nonterminal 	MethodModifiers;
nonterminal				LastFormalParameter;

//
non terminal 	Identifier;

compilationUnit ::= typeDeclaration;
typeDeclaration ::= classDeclaration;
classDeclaration ::= normalClassDeclaration;
normalClassDeclaration ::= classModifiers CLASS Identifier classBody;// zyx: change 
Identifier::=IDENTIFIER;//zyx: add here
classModifiers ::= classModifier classModifiers
                  | /* empty */
                  ;
                  
                  
classModifier ::=  PUBLIC|STATIC ;//PUBLIC | PROTECTED | PRIVATE | ABSTRACT | STATIC | FINAL | STRICTFP;

classBody ::= LBRACE ClassBodyDeclaration RBRACE;



ClassBodyDeclaration::=ClassMemberDeclaration;
ClassMemberDeclaration::= MethodDeclaration	;
MethodDeclaration::=MethodModifiers  MethodHeader /*MethodBody*/;//Marshall, when use MethodHeader here will generate error
MethodModifiers::=MethodModifier MethodModifiers
				|
				;
MethodModifier::=PUBLIC|STATIC ;//PUBLIC | PROTECTED | PRIVATE | ABSTRACT | STATIC | FINAL | STRICTFP;


MethodHeader::=Result MethodDeclarator;
Result::=VOID;
MethodDeclarator::=Identifier LPAREN FormalParameterList RPAREN;



FormalParameterList::= LastFormalParameter;//FormalParameters;

LastFormalParameter::=FormalParameter;

FormalParameter::= UnannType VariableDeclaratorId;
VariableDeclaratorId::=Identifier;


UnannType::= UnannReferenceType;
UnannReferenceType::= UnannArrayType;
UnannArrayType::=UnannClassOrInterfaceType  Dims;
Dims::=LBRACK RBRACK;
UnannClassOrInterfaceType::= UnannClassType;
UnannClassType::= Identifier;



MethodBody::=Block;
Block::={ BlockStatements };
/*
BlockStatements::=BlockStatement;
BlockStatement::=Statement;
Statement::=StatementWithoutTrailingSubstatement;
StatementWithoutTrailingSubstatement::=ExpressionStatement;
ExpressionStatement::=StatementExpression ";(terminal)";

StatementExpression::=Assignment;
Assignment::=LeftHandSide AssignmentOperator Expression;
LeftHandSide::=ExpressionName;
ExpressionName::=Identifier ;
Identifier ::=IDENTIFIER;
Expression::=*/


BlockStatement::= LocalVariableDeclarationStatement;
LocalVariableDeclarationStatement::=LocalVariableDeclaration ";"(terminal);
LocalVariableDeclaration::=UnannType VariableDeclaratorList;
UnannType::=UnannPrimitiveType;
UnannPrimitiveType::=NumericType;
NumericType::=IntegralType;
IntegralType::=int(terminal);

VariableDeclaratorList::=VariableDeclarator;
VariableDeclarator::=VariableDeclaratorId = VariableInitializer(?);
VariableDeclaratorId::=Identifier;
Identifier::=IDENTIFIER;
=VariableInitializer::=Expression;
Expression::=AssignmentExpression;
AssignmentExpression::=LeftHandSide Assignment Expression;
Assignment::=AssignmentOperator;
AssignmentOperator::= (terminal);
LeftHandSide::=ExpressionName ;
ExpressionName ::=Identifier;
Identifier::=IDENTIFIER;


