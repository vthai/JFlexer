package org.ifn660.jflexer;

import java_cup.runtime.*;

/* Symbol lists
These declarations name and supply an object type for each terminal and non-terminal symbol that appears in the grammar
Terminals are returned by the scanner and placed on the parse stack
Non-terminals replace a series of Symbol objects on the parse stack when the RHS of a production is recognised
*/

terminal        INT, BOOLEAN, CHAR, CONST, DOUBLE, FLOAT, LONG, SHORT;
terminal        ABSTRACT, CLASS, SUPER, INTERFACE, EXTENDS, IMPLEMENTS;
terminal        VOID, NULL, STATIC;
terminal        IF, ELSE, DO, WHILE, FOR, CASE, SWITCH, BREAK;
terminal        RETURN;
terminal        PUBLIC, PRIVATE, PROTECTED;
terminal        ASSERT, BYTE;
terminal        CONTINUE, DEFAULT, ENUM, FINAL, FINALLY, GOTO;
terminal        IMPORT, INSTANCEOF, NATIVE, NEW, PACKAGE, STRICTFP;
terminal        SYNCHRONIZED, THIS, TRANSIENT, VOLATILE;
terminal        CATCH, TRY, THROW, THROWS;
terminal        IDENTIFIER;
terminal        OP_EQ, OP_GT, OP_LT, OP_NOT_EQ, OP_UNARY, OP_TERNARY, OP_LOOP_IN, OP_LAMBDA, 
                OP_EQ_EQ, OP_GT_EQ, OP_LT_EQ, OP_LOGIC_AND, OP_LOGIC_OR, OP_POS_INCR, 
                OP_NEG_INCR, OP_PLUS, OP_MINUS, OP_MULTIPLY, OP_DIVIDE, OP_AND, OP_OR, OP_XOR, 
                OP_MODULUS, OP_BIT_L_SHIFT, OP_BIT_R_SHIFT, OP_UNSIGN_R_SHIFT, OP_ADD_AND, OP_MINUS_AND, 
                OP_MULTIPLY_AND, OP_DIVIDE_AND, OP_BIT_AND, OP_BIT_INCL_OR, OP_BIT_EXCL_OR, 
                OP_MODULUS_AND, OP_L_SHIFT_AND, OP_R_SHIFT_AND, OP_UNSIGN_R_SHIFT_AND;
terminal        INTEGER_LITERAL, STRING_LITERAL;
terminal        LPAREN, RPAREN, LBRACE, RBRACE, LBRACK, RBRACK, SEMICOLON, COMMA, DOT;
terminal        UNKNOWN;

nonterminal      CompilationUnit, TypeDeclaration, ClassDeclaration;
nonterminal      NormalClassDeclaration, ClassModifiers, ClassModifier, ClassBody;
nonterminal      FormalParameter,UnannType,UnannReferenceType;
nonterminal      VariableDeclaratorList, VariableDeclarators, VariableDeclarator;
nonterminal      VariableDeclaratorId, VariableInitializer;
nonterminal      UnannArrayType,UnannClassOrInterfaceType,UnannClassType,Dims;
nonterminal      ClassBodyDeclaration,ClassMemberDeclaration,MethodDeclaration,MethodModifier;
nonterminal      MethodHeader,MethodBody,MethodModifiers,Result,MethodDeclarator,FormalParameterList,FormalParameters;
nonterminal      Block, BlockStatements, BlockStatement;
nonterminal      LocalVariableDeclarationStatement, LocalVariableDeclaration;
nonterminal      UnnanType, UnnanPrimitiveType, UnnanReferenceType, NumericType, IntegralType, FloatingPointType;
nonterminal      Identifier;
nonterminal      LastFormalParameter;
nonterminal      DecimalNumeral, DecimalIntegerLiteral, IntegerLiteral, Literal;
nonterminal      PrimaryNoNewArray, Primary, PostfixExpression, UnaryExpressionNotPlusMinus;
nonterminal      UnaryExpression, MultiplicativeExpression, AdditiveExpression, ShiftExpression;
nonterminal      RelationalExpression, EqualityExpression, AndExpression, ExclusiveOrExpression;
nonterminal      InclusiveOrExpression, ConditionalAndExpression, ConditionalOrExpression;
nonterminal      ConditionalExpression, AssignmentExpression, Expression;

/* Compilation related grammar */

CompilationUnit             ::= TypeDeclaration;

TypeDeclaration             ::= ClassDeclaration;

ClassDeclaration            ::= NormalClassDeclaration;

NormalClassDeclaration      ::= ClassModifiers CLASS Identifier ClassBody;

ClassModifiers              ::= ClassModifier ClassModifiers
                            | /* empty */
                            ;

ClassModifier               ::= PUBLIC | PROTECTED | PRIVATE | ABSTRACT | STATIC | FINAL | STRICTFP;

ClassBody                   ::= LBRACE ClassBodyDeclaration  RBRACE;

Identifier                  ::= IDENTIFIER;

ClassBodyDeclaration        ::= ClassMemberDeclaration;

ClassMemberDeclaration      ::= MethodDeclaration;

/* Method related grammar */

MethodDeclaration           ::= MethodModifiers  MethodHeader MethodBody;

MethodModifiers             ::= MethodModifier MethodModifiers
                            |
                            ;

MethodModifier              ::= PUBLIC | PROTECTED | PRIVATE | ABSTRACT | STATIC | FINAL | STRICTFP;

MethodHeader                ::= Result MethodDeclarator;

Result                      ::= VOID;

MethodDeclarator            ::= Identifier LPAREN FormalParameterList RPAREN
                            | Identifier LPAREN  RPAREN /* zero or 1 param list*/
                            ;

FormalParameterList         ::= LastFormalParameter;

LastFormalParameter         ::= FormalParameter;

FormalParameter             ::= UnannType VariableDeclaratorId;

UnannType                   ::= UnannReferenceType;

UnannReferenceType          ::= UnannArrayType;

UnannArrayType              ::= UnannClassOrInterfaceType Dims;

Dims                        ::= LBRACK RBRACK;

UnannClassOrInterfaceType   ::= UnannClassType;

UnannClassType              ::= Identifier;

/* Assignment Expression related grammar */

Expression                  ::= AssignmentExpression;

AssignmentExpression        ::= ConditionalExpression;

ConditionalExpression       ::= ConditionalOrExpression;

ConditionalOrExpression     ::= ConditionalAndExpression;

ConditionalAndExpression    ::= InclusiveOrExpression;

InclusiveOrExpression       ::= ExclusiveOrExpression;

ExclusiveOrExpression       ::= AndExpression;

AndExpression               ::= EqualityExpression;

EqualityExpression          ::= RelationalExpression;

RelationalExpression        ::= ShiftExpression;

ShiftExpression             ::= AdditiveExpression;

AdditiveExpression          ::= MultiplicativeExpression;

MultiplicativeExpression    ::= UnaryExpression;

UnaryExpression             ::= UnaryExpressionNotPlusMinus;

UnaryExpressionNotPlusMinus ::= PostfixExpression;

PostfixExpression           ::= Primary;

Primary                     ::= PrimaryNoNewArray;

PrimaryNoNewArray           ::= Literal;

Literal                     ::= IntegerLiteral;

IntegerLiteral              ::= DecimalIntegerLiteral;

DecimalIntegerLiteral       ::= DecimalNumeral;

DecimalNumeral              ::= NonZeroDigit
							| Digits
							;
							
Digits						::= Digit
							| Digit Digit
							;
							
Digit						::= 0
							| NonZeroDigit
							;
							
NonZeroDigit				::= 1
							| 2
							| 3
							| 4
							| 5
							| 6
							| 7
							| 8
							| 9
							;
							
							

/* Method body related grammar */

MethodBody                  ::= Block
                            | SEMICOLON
                            ;

Block                       ::= LBRACE BlockStatements RBRACE
                            | LBRACE RBRACE /* according to the grammar BlockStatements is 0 or 1*/
                            ;

BlockStatements             ::= BlockStatement
                            | BlockStatement BlockStatements
                            ;

BlockStatement              ::= LocalVariableDeclarationStatement
                            ;

LocalVariableDeclarationStatement ::= LocalVariableDeclaration SEMICOLON
                                   ;

LocalVariableDeclaration    ::= UnnanType VariableDeclaratorList
                            /*| VariableModifier UnnanType VariableDeclaratorList */
                            ;

VariableDeclaratorList      ::= VariableDeclarators;
                            
VariableDeclarators         ::= VariableDeclarator
                            | VariableDeclarator COMMA VariableDeclarators
                            ;
                            
VariableDeclarator          ::= VariableDeclaratorId
                            | VariableDeclaratorId OP_EQ VariableInitializer
                            ;
                            
VariableDeclaratorId        ::= Identifier
                            | Identifier Dims
                            ;

VariableInitializer         ::= Expression;

UnnanType                   ::= UnnanPrimitiveType
                            /*| UnnanReferenceType*/
                            ;

UnnanPrimitiveType          ::= NumericType
                            /*| BOOLEAN*/
                            ;

NumericType                 ::= IntegralType
                            | FloatingPointType
                            ;

IntegralType                ::= INT
                            | CHAR
                            | BYTE
                            | SHORT
                            | LONG
                            ;

FloatingPointType           ::= DOUBLE
                            | FLOAT
                            ;
                            


