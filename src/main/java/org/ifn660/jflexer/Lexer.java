/* The following code was generated by JFlex 1.6.1 */

/* JFlex example: partial Java language lexer specification */
package org.ifn660.jflexer;

import java_cup.runtime.*;

/**
 * This class is a simple example lexer.
 */
 

public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\0"+
    "\1\42\1\0\1\6\3\0\1\43\1\44\1\5\1\55\1\52\1\0"+
    "\1\53\1\4\1\10\11\11\1\0\1\51\1\0\1\54\3\0\32\6"+
    "\1\47\1\56\1\50\1\0\1\6\1\0\1\12\1\13\1\17\1\31"+
    "\1\20\1\32\1\35\1\26\1\27\1\6\1\24\1\22\1\33\1\23"+
    "\1\21\1\36\1\6\1\16\1\14\1\15\1\30\1\37\1\40\1\34"+
    "\1\25\1\41\1\45\1\0\1\46\1\0\41\7\2\0\4\6\4\0"+
    "\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0\27\6\1\0"+
    "\37\6\1\0\u01ca\6\4\0\14\6\16\0\5\6\7\0\1\6\1\0"+
    "\1\6\21\0\160\7\5\6\1\0\2\6\2\0\4\6\10\0\1\6"+
    "\1\0\3\6\1\0\1\6\1\0\24\6\1\0\123\6\1\0\213\6"+
    "\1\0\5\7\2\0\236\6\11\0\46\6\2\0\1\6\7\0\47\6"+
    "\7\0\1\6\1\0\55\7\1\0\1\7\1\0\2\7\1\0\2\7"+
    "\1\0\1\7\10\0\33\6\5\0\3\6\15\0\5\7\6\0\1\6"+
    "\4\0\13\7\5\0\53\6\37\7\4\0\2\6\1\7\143\6\1\0"+
    "\1\6\10\7\1\0\6\7\2\6\2\7\1\0\4\7\2\6\12\7"+
    "\3\6\2\0\1\6\17\0\1\7\1\6\1\7\36\6\33\7\2\0"+
    "\131\6\13\7\1\6\16\0\12\7\41\6\11\7\2\6\4\0\1\6"+
    "\5\0\26\6\4\7\1\6\11\7\1\6\3\7\1\6\5\7\22\0"+
    "\31\6\3\7\104\0\1\6\1\0\13\6\67\0\33\7\1\0\4\7"+
    "\66\6\3\7\1\6\22\7\1\6\7\7\12\6\2\7\2\0\12\7"+
    "\1\0\7\6\1\0\7\6\1\0\3\7\1\0\10\6\2\0\2\6"+
    "\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0\1\7"+
    "\1\6\7\7\2\0\2\7\2\0\3\7\1\6\10\0\1\7\4\0"+
    "\2\6\1\0\3\6\2\7\2\0\12\7\4\6\7\0\1\6\5\0"+
    "\3\7\1\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0"+
    "\2\7\2\0\3\7\3\0\1\7\7\0\4\6\1\0\1\6\7\0"+
    "\14\7\3\6\1\7\13\0\3\7\1\0\11\6\1\0\3\6\1\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6"+
    "\10\7\1\0\3\7\1\0\3\7\2\0\1\6\17\0\2\6\2\7"+
    "\2\0\12\7\1\0\1\6\17\0\3\7\1\0\10\6\2\0\2\6"+
    "\2\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7"+
    "\1\6\7\7\2\0\2\7\2\0\3\7\10\0\2\7\4\0\2\6"+
    "\1\0\3\6\2\7\2\0\12\7\1\0\1\6\20\0\1\7\1\6"+
    "\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6"+
    "\1\0\2\6\3\0\2\6\3\0\3\6\3\0\14\6\4\0\5\7"+
    "\3\0\3\7\1\0\4\7\2\0\1\6\6\0\1\7\16\0\12\7"+
    "\11\0\1\6\7\0\3\7\1\0\10\6\1\0\3\6\1\0\27\6"+
    "\1\0\12\6\1\0\5\6\3\0\1\6\7\7\1\0\3\7\1\0"+
    "\4\7\7\0\2\7\1\0\2\6\6\0\2\6\2\7\2\0\12\7"+
    "\22\0\2\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6"+
    "\1\0\5\6\2\0\1\7\1\6\7\7\1\0\3\7\1\0\4\7"+
    "\7\0\2\7\7\0\1\6\1\0\2\6\2\7\2\0\12\7\1\0"+
    "\2\6\17\0\2\7\1\0\10\6\1\0\3\6\1\0\51\6\2\0"+
    "\1\6\7\7\1\0\3\7\1\0\4\7\1\6\10\0\1\7\10\0"+
    "\2\6\2\7\2\0\12\7\12\0\6\6\2\0\2\7\1\0\22\6"+
    "\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6\3\0\1\7"+
    "\4\0\6\7\1\0\1\7\1\0\10\7\22\0\2\7\15\0\60\6"+
    "\1\7\2\6\7\7\4\0\10\6\10\7\1\0\12\7\47\0\2\6"+
    "\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6"+
    "\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6"+
    "\1\0\4\6\1\7\2\6\6\7\1\0\2\7\1\6\2\0\5\6"+
    "\1\0\1\6\1\0\6\7\2\0\12\7\2\0\4\6\40\0\1\6"+
    "\27\0\2\7\6\0\12\7\13\0\1\7\1\0\1\7\1\0\1\7"+
    "\4\0\2\7\10\6\1\0\44\6\4\0\24\7\1\0\2\7\5\6"+
    "\13\7\1\0\44\7\11\0\1\7\71\0\53\6\24\7\1\6\12\7"+
    "\6\0\6\6\4\7\4\6\3\7\1\6\3\7\2\6\7\7\3\6"+
    "\4\7\15\6\14\7\1\6\17\7\2\0\46\6\1\0\1\6\5\0"+
    "\1\6\2\0\53\6\1\0\u014d\6\1\0\4\6\2\0\7\6\1\0"+
    "\1\6\1\0\4\6\2\0\51\6\1\0\4\6\2\0\41\6\1\0"+
    "\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\17\6\1\0"+
    "\71\6\1\0\4\6\2\0\103\6\2\0\3\7\40\0\20\6\20\0"+
    "\125\6\14\0\u026c\6\2\0\21\6\1\0\32\6\5\0\113\6\3\0"+
    "\3\6\17\0\15\6\1\0\4\6\3\7\13\0\22\6\3\7\13\0"+
    "\22\6\2\7\14\0\15\6\1\0\3\6\1\0\2\7\14\0\64\6"+
    "\40\7\3\0\1\6\3\0\2\6\1\7\2\0\12\7\41\0\3\7"+
    "\2\0\12\7\6\0\130\6\10\0\51\6\1\7\1\6\5\0\106\6"+
    "\12\0\35\6\3\0\14\7\4\0\14\7\12\0\12\7\36\6\2\0"+
    "\5\6\13\0\54\6\4\0\21\7\7\6\2\7\6\0\12\7\46\0"+
    "\27\6\5\7\4\0\65\6\12\7\1\0\35\7\2\0\13\7\6\0"+
    "\12\7\15\0\1\6\130\0\5\7\57\6\21\7\7\6\4\0\12\7"+
    "\21\0\11\7\14\0\3\7\36\6\15\7\2\6\12\7\54\6\16\7"+
    "\14\0\44\6\24\7\10\0\12\7\3\0\3\6\12\7\44\6\122\0"+
    "\3\7\1\0\25\7\4\6\1\7\4\6\3\7\2\6\11\0\300\6"+
    "\47\7\25\0\4\7\u0116\6\2\0\6\6\2\0\46\6\2\0\6\6"+
    "\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6"+
    "\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6"+
    "\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6"+
    "\16\0\5\7\32\0\5\7\20\0\2\6\23\0\1\6\13\0\5\7"+
    "\5\0\6\7\1\0\1\6\15\0\1\6\20\0\15\6\3\0\33\6"+
    "\25\0\15\7\4\0\1\7\3\0\14\7\21\0\1\6\4\0\1\6"+
    "\2\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\13\6\2\0\4\6\5\0\5\6"+
    "\4\0\1\6\21\0\51\6\u0a77\0\57\6\1\0\57\6\1\0\205\6"+
    "\6\0\4\6\3\7\2\6\14\0\46\6\1\0\1\6\5\0\1\6"+
    "\2\0\70\6\7\0\1\6\17\0\1\7\27\6\11\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\40\7\57\0\1\6\u01d5\0\3\6\31\0"+
    "\11\6\6\7\1\0\5\6\2\0\5\6\4\0\126\6\2\0\2\7"+
    "\2\0\3\6\1\0\132\6\1\0\4\6\5\0\51\6\3\0\136\6"+
    "\21\0\33\6\65\0\20\6\u0200\0\u19b6\6\112\0\u51cd\6\63\0\u048d\6"+
    "\103\0\56\6\2\0\u010d\6\3\0\20\6\12\7\2\6\24\0\57\6"+
    "\1\7\4\0\12\7\1\0\31\6\7\0\1\7\120\6\2\7\45\0"+
    "\11\6\2\0\147\6\2\0\4\6\1\0\4\6\14\0\13\6\115\0"+
    "\12\6\1\7\3\6\1\7\4\6\1\7\27\6\5\7\20\0\1\6"+
    "\7\0\64\6\14\0\2\7\62\6\21\7\13\0\12\7\6\0\22\7"+
    "\6\6\3\0\1\6\4\0\12\7\34\6\10\7\2\0\27\6\15\7"+
    "\14\0\35\6\3\0\4\7\57\6\16\7\16\0\1\6\12\7\46\0"+
    "\51\6\16\7\11\0\3\6\1\7\10\6\2\7\2\0\12\7\6\0"+
    "\27\6\3\0\1\6\1\7\4\0\60\6\1\7\1\6\3\7\2\6"+
    "\2\7\5\6\2\7\1\6\1\7\1\6\30\0\3\6\2\0\13\6"+
    "\5\7\2\0\3\6\2\7\12\0\6\6\2\0\6\6\2\0\6\6"+
    "\11\0\7\6\1\0\7\6\221\0\43\6\10\7\1\0\2\7\2\0"+
    "\12\7\6\0\u2ba4\6\14\0\27\6\4\0\61\6\u2104\0\u016e\6\2\0"+
    "\152\6\46\0\7\6\14\0\5\6\5\0\1\6\1\7\12\6\1\0"+
    "\15\6\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0"+
    "\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6\3\0"+
    "\20\7\20\0\7\7\14\0\2\6\30\0\3\6\31\0\1\6\6\0"+
    "\5\6\1\0\207\6\2\0\1\7\4\0\1\6\13\0\12\7\7\0"+
    "\32\6\4\0\1\6\1\0\32\6\13\0\131\6\3\0\6\6\2\0"+
    "\6\6\2\0\6\6\2\0\3\6\3\0\2\6\3\0\2\6\22\0"+
    "\3\7\4\0\14\6\1\0\32\6\1\0\23\6\1\0\2\6\1\0"+
    "\17\6\2\0\16\6\42\0\173\6\105\0\65\6\210\0\1\7\202\0"+
    "\35\6\3\0\61\6\57\0\37\6\21\0\33\6\65\0\36\6\2\0"+
    "\44\6\4\0\10\6\1\0\5\6\52\0\236\6\2\0\12\7\u0356\0"+
    "\6\6\2\0\1\6\1\0\54\6\1\0\2\6\3\0\1\6\2\0"+
    "\27\6\252\0\26\6\12\0\32\6\106\0\70\6\6\0\2\6\100\0"+
    "\1\6\3\7\1\0\2\7\5\0\4\7\4\6\1\0\3\6\1\0"+
    "\33\6\4\0\3\7\4\0\1\7\40\0\35\6\203\0\66\6\12\0"+
    "\26\6\12\0\23\6\215\0\111\6\u03b7\0\3\7\65\6\17\7\37\0"+
    "\12\7\20\0\3\7\55\6\13\7\2\0\1\7\22\0\31\6\7\0"+
    "\12\7\6\0\3\7\44\6\16\7\1\0\12\7\100\0\3\7\60\6"+
    "\16\7\4\6\13\0\12\7\u04a6\0\53\6\15\7\10\0\12\7\u0936\0"+
    "\u036f\6\221\0\143\6\u0b9d\0\u042f\6\u33d1\0\u0239\6\u04c7\0\105\6\13\0"+
    "\1\6\56\7\20\0\4\7\15\6\u4060\0\2\6\u2163\0\5\7\3\0"+
    "\26\7\2\0\7\7\36\0\4\7\224\0\3\7\u01bb\0\125\6\1\0"+
    "\107\6\1\0\2\6\2\0\1\6\2\0\2\6\2\0\4\6\1\0"+
    "\14\6\1\0\1\6\1\0\7\6\1\0\101\6\1\0\4\6\2\0"+
    "\10\6\1\0\7\6\1\0\34\6\1\0\4\6\1\0\5\6\1\0"+
    "\1\6\3\0\7\6\1\0\u0154\6\2\0\31\6\1\0\31\6\1\0"+
    "\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0"+
    "\31\6\1\0\37\6\1\0\31\6\1\0\10\6\2\0\62\7\u1600\0"+
    "\4\6\1\0\33\6\1\0\2\6\1\0\1\6\2\0\1\6\1\0"+
    "\12\6\1\0\4\6\1\0\1\6\1\0\1\6\6\0\1\6\4\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\3\6\1\0\2\6\1\0"+
    "\1\6\2\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\2\6\1\0\1\6\2\0\4\6\1\0\7\6\1\0"+
    "\4\6\1\0\4\6\1\0\1\6\1\0\12\6\1\0\21\6\5\0"+
    "\3\6\1\0\5\6\1\0\21\6\u1144\0\ua6d7\6\51\0\u1035\6\13\0"+
    "\336\6\u3fe2\0\u021e\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\7\36\0\140\7\200\0\360\7\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\1\1\3\2\4\20\3\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\2\1\0"+
    "\30\3\1\24\2\3\1\25\11\3\1\26\1\27\1\30"+
    "\1\31\1\32\2\0\14\3\1\33\15\3\1\34\1\3"+
    "\1\35\3\3\1\36\12\3\1\0\1\2\4\3\1\37"+
    "\10\3\1\40\1\3\1\41\4\3\1\42\1\43\1\44"+
    "\1\3\1\45\11\3\1\46\5\3\1\47\3\3\1\50"+
    "\4\3\1\51\1\52\2\3\1\53\1\3\1\54\1\55"+
    "\1\3\1\56\10\3\1\57\1\60\5\3\1\61\1\3"+
    "\1\62\1\3\1\63\2\3\1\64\1\3\1\65\1\66"+
    "\2\3\1\67\2\3\1\70\2\3\1\71\4\3\1\72"+
    "\2\3\1\73\4\3\1\74\3\3\1\75\1\76\1\77"+
    "\1\3\1\100\1\3\1\101\1\102\2\3\1\103\4\3"+
    "\1\104\1\3\1\105\1\3\1\106\1\3\1\107\1\3"+
    "\1\110\1\111\1\3\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\136\0\274\0\353\0\136"+
    "\0\u011a\0\u0149\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263"+
    "\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db"+
    "\0\u040a\0\136\0\136\0\136\0\136\0\136\0\136\0\136"+
    "\0\136\0\136\0\136\0\u0439\0\136\0\u0468\0\136\0\u0497"+
    "\0\u04c6\0\u04f5\0\u0524\0\u0553\0\u0582\0\u05b1\0\u05e0\0\u060f"+
    "\0\u063e\0\u066d\0\u069c\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u0787"+
    "\0\u07b6\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff"+
    "\0\u092e\0\u095d\0\353\0\u098c\0\u09bb\0\u09ea\0\u0a19\0\u0a48"+
    "\0\u0a77\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\136"+
    "\0\136\0\136\0\136\0\136\0\u0bc0\0\u0bef\0\u0c1e\0\u0c4d"+
    "\0\u0c7c\0\u0cab\0\u0cda\0\u0d09\0\u0d38\0\u0d67\0\u0d96\0\u0dc5"+
    "\0\u0df4\0\u0e23\0\353\0\u0e52\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e"+
    "\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9\0\u1028\0\u1057\0\u1086"+
    "\0\353\0\u10b5\0\u10e4\0\u1113\0\u1142\0\u1171\0\353\0\u11a0"+
    "\0\u11cf\0\u11fe\0\u122d\0\u125c\0\u128b\0\u12ba\0\u12e9\0\u1318"+
    "\0\u1347\0\u1376\0\u0bc0\0\u13a5\0\u13d4\0\u1403\0\u1432\0\353"+
    "\0\u1461\0\u1490\0\u14bf\0\u14ee\0\u151d\0\u154c\0\u157b\0\u15aa"+
    "\0\353\0\u15d9\0\353\0\u1608\0\u1637\0\u1666\0\u1695\0\353"+
    "\0\353\0\353\0\u16c4\0\353\0\u16f3\0\u1722\0\u1751\0\u1780"+
    "\0\u17af\0\u17de\0\u180d\0\u183c\0\u186b\0\353\0\u189a\0\u18c9"+
    "\0\u18f8\0\u1927\0\u1956\0\353\0\u1985\0\u19b4\0\u19e3\0\353"+
    "\0\u1a12\0\u1a41\0\u1a70\0\u1a9f\0\353\0\353\0\u1ace\0\u1afd"+
    "\0\u1b2c\0\u1b5b\0\353\0\353\0\u1b8a\0\353\0\u1bb9\0\u1be8"+
    "\0\u1c17\0\u1c46\0\u1c75\0\u1ca4\0\u1cd3\0\u1d02\0\353\0\u1d31"+
    "\0\u1d60\0\u1d8f\0\u1dbe\0\u1ded\0\u1e1c\0\353\0\u1e4b\0\353"+
    "\0\u1e7a\0\353\0\u1ea9\0\u1ed8\0\353\0\u1f07\0\353\0\353"+
    "\0\u1f36\0\u1f65\0\353\0\u1f94\0\u1fc3\0\353\0\u1ff2\0\u2021"+
    "\0\353\0\u2050\0\u207f\0\u20ae\0\u20dd\0\353\0\u210c\0\u213b"+
    "\0\353\0\u216a\0\u2199\0\u21c8\0\u21f7\0\353\0\u2226\0\u2255"+
    "\0\u2284\0\353\0\353\0\353\0\u22b3\0\353\0\u22e2\0\353"+
    "\0\353\0\u2311\0\u2340\0\353\0\u236f\0\u239e\0\u23cd\0\u23fc"+
    "\0\353\0\u242b\0\353\0\u245a\0\353\0\u2489\0\353\0\u24b8"+
    "\0\353\0\353\0\u24e7\0\353";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\3\1\7\1\3\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\7\1\21\1\22\3\7\1\23\1\7\1\24\1\25"+
    "\2\7\1\26\1\27\1\30\1\31\1\7\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\3\1\46\2\3\37\46\1\47\13\46"+
    "\1\50\61\0\1\5\60\0\1\51\1\52\57\0\34\7"+
    "\25\0\2\11\53\0\5\7\1\53\1\54\25\7\23\0"+
    "\10\7\1\55\2\7\1\56\3\7\1\57\14\7\23\0"+
    "\7\7\1\60\7\7\1\61\1\62\1\7\1\63\7\7"+
    "\1\64\1\7\23\0\10\7\1\65\7\7\1\66\13\7"+
    "\23\0\12\7\1\67\21\7\23\0\4\7\1\70\6\7"+
    "\1\71\1\72\3\7\1\73\13\7\23\0\14\7\1\74"+
    "\1\75\10\7\1\76\5\7\23\0\13\7\1\77\20\7"+
    "\23\0\4\7\1\100\5\7\1\101\21\7\23\0\15\7"+
    "\1\102\6\7\1\103\1\104\6\7\23\0\12\7\1\105"+
    "\1\106\20\7\23\0\13\7\1\107\1\110\4\7\1\111"+
    "\12\7\23\0\13\7\1\112\20\7\23\0\4\7\1\113"+
    "\3\7\1\114\11\7\1\115\11\7\23\0\13\7\1\116"+
    "\20\7\23\0\20\7\1\117\13\7\71\0\1\120\2\0"+
    "\1\46\2\0\37\46\1\0\13\46\16\0\1\121\1\122"+
    "\4\0\1\123\16\0\1\124\14\0\1\51\1\4\1\5"+
    "\54\51\5\125\1\126\51\125\6\0\6\7\1\127\25\7"+
    "\23\0\6\7\1\130\25\7\23\0\12\7\1\131\21\7"+
    "\23\0\13\7\1\132\20\7\23\0\7\7\1\133\24\7"+
    "\23\0\4\7\1\134\3\7\1\135\23\7\23\0\15\7"+
    "\1\136\16\7\23\0\13\7\1\137\20\7\23\0\30\7"+
    "\1\140\3\7\23\0\21\7\1\141\12\7\23\0\4\7"+
    "\1\142\12\7\1\143\14\7\23\0\10\7\1\144\10\7"+
    "\1\145\12\7\23\0\7\7\1\146\24\7\23\0\6\7"+
    "\1\147\1\150\24\7\23\0\15\7\1\151\16\7\23\0"+
    "\4\7\1\152\27\7\23\0\4\7\1\153\27\7\23\0"+
    "\6\7\1\154\25\7\23\0\22\7\1\155\11\7\23\0"+
    "\7\7\1\156\24\7\23\0\15\7\1\157\16\7\23\0"+
    "\7\7\1\160\24\7\23\0\32\7\1\161\1\7\23\0"+
    "\6\7\1\162\1\163\24\7\23\0\30\7\1\164\3\7"+
    "\23\0\24\7\1\165\7\7\23\0\22\7\1\166\11\7"+
    "\23\0\10\7\1\167\23\7\23\0\13\7\1\170\20\7"+
    "\23\0\15\7\1\171\16\7\23\0\7\7\1\172\24\7"+
    "\23\0\11\7\1\173\22\7\23\0\13\7\1\174\5\7"+
    "\1\175\12\7\23\0\5\7\1\176\26\7\23\0\14\7"+
    "\1\177\4\7\1\200\12\7\23\0\21\7\1\201\12\7"+
    "\15\0\5\125\1\202\55\125\1\203\1\202\51\125\6\0"+
    "\7\7\1\204\24\7\23\0\12\7\1\205\21\7\23\0"+
    "\4\7\1\206\27\7\23\0\14\7\1\207\17\7\23\0"+
    "\12\7\1\210\21\7\23\0\7\7\1\211\24\7\23\0"+
    "\21\7\1\212\12\7\23\0\11\7\1\213\22\7\23\0"+
    "\10\7\1\214\23\7\23\0\12\7\1\215\21\7\23\0"+
    "\7\7\1\216\24\7\23\0\15\7\1\217\16\7\23\0"+
    "\13\7\1\220\20\7\23\0\6\7\1\221\25\7\23\0"+
    "\22\7\1\222\11\7\23\0\12\7\1\223\21\7\23\0"+
    "\11\7\1\224\22\7\23\0\6\7\1\225\1\226\24\7"+
    "\23\0\6\7\1\227\25\7\23\0\10\7\1\230\23\7"+
    "\23\0\12\7\1\231\21\7\23\0\25\7\1\232\6\7"+
    "\23\0\12\7\1\233\21\7\23\0\27\7\1\234\4\7"+
    "\23\0\21\7\1\235\12\7\23\0\7\7\1\236\24\7"+
    "\23\0\12\7\1\237\21\7\23\0\13\7\1\240\1\241"+
    "\17\7\23\0\4\7\1\242\27\7\23\0\5\7\1\243"+
    "\26\7\23\0\4\7\1\244\27\7\23\0\4\7\1\245"+
    "\27\7\23\0\13\7\1\246\20\7\23\0\16\7\1\247"+
    "\15\7\23\0\7\7\1\250\24\7\23\0\31\7\1\251"+
    "\2\7\23\0\14\7\1\252\17\7\23\0\4\7\1\253"+
    "\27\7\23\0\23\7\1\254\10\7\23\0\14\7\1\255"+
    "\17\7\15\0\4\125\1\5\1\202\51\125\6\0\10\7"+
    "\1\256\23\7\23\0\10\7\1\257\23\7\23\0\16\7"+
    "\1\260\15\7\23\0\12\7\1\261\21\7\23\0\21\7"+
    "\1\262\12\7\23\0\11\7\1\263\22\7\23\0\20\7"+
    "\1\264\13\7\23\0\7\7\1\265\24\7\23\0\10\7"+
    "\1\266\23\7\23\0\11\7\1\267\22\7\23\0\6\7"+
    "\1\270\25\7\23\0\32\7\1\271\1\7\23\0\10\7"+
    "\1\272\23\7\23\0\20\7\1\273\13\7\23\0\7\7"+
    "\1\274\24\7\23\0\21\7\1\275\12\7\23\0\6\7"+
    "\1\276\25\7\23\0\15\7\1\277\16\7\23\0\31\7"+
    "\1\300\2\7\23\0\4\7\1\301\27\7\23\0\10\7"+
    "\1\302\23\7\23\0\10\7\1\303\23\7\23\0\12\7"+
    "\1\304\21\7\23\0\22\7\1\305\11\7\23\0\14\7"+
    "\1\306\17\7\23\0\7\7\1\307\24\7\23\0\14\7"+
    "\1\310\17\7\23\0\4\7\1\311\27\7\23\0\12\7"+
    "\1\312\21\7\23\0\4\7\1\313\27\7\23\0\21\7"+
    "\1\314\12\7\23\0\7\7\1\315\24\7\23\0\12\7"+
    "\1\316\21\7\23\0\4\7\1\317\27\7\23\0\7\7"+
    "\1\320\24\7\23\0\4\7\1\321\27\7\23\0\11\7"+
    "\1\322\22\7\23\0\7\7\1\323\24\7\23\0\10\7"+
    "\1\324\23\7\23\0\20\7\1\325\13\7\23\0\21\7"+
    "\1\326\12\7\23\0\6\7\1\327\25\7\23\0\15\7"+
    "\1\330\16\7\23\0\15\7\1\331\16\7\23\0\23\7"+
    "\1\332\10\7\23\0\12\7\1\333\21\7\23\0\15\7"+
    "\1\334\16\7\23\0\24\7\1\335\7\7\23\0\7\7"+
    "\1\336\24\7\23\0\25\7\1\337\6\7\23\0\14\7"+
    "\1\340\17\7\23\0\12\7\1\341\21\7\23\0\14\7"+
    "\1\342\17\7\23\0\27\7\1\343\4\7\23\0\11\7"+
    "\1\344\22\7\23\0\7\7\1\345\24\7\23\0\11\7"+
    "\1\346\22\7\23\0\21\7\1\347\12\7\23\0\11\7"+
    "\1\350\22\7\23\0\15\7\1\351\16\7\23\0\24\7"+
    "\1\352\7\7\23\0\13\7\1\353\20\7\23\0\12\7"+
    "\1\354\21\7\23\0\22\7\1\355\11\7\23\0\6\7"+
    "\1\356\25\7\23\0\11\7\1\357\22\7\23\0\4\7"+
    "\1\360\27\7\23\0\12\7\1\361\21\7\23\0\7\7"+
    "\1\362\24\7\23\0\17\7\1\363\14\7\23\0\12\7"+
    "\1\364\21\7\23\0\7\7\1\365\24\7\23\0\12\7"+
    "\1\366\21\7\23\0\14\7\1\367\17\7\23\0\7\7"+
    "\1\370\24\7\23\0\30\7\1\371\3\7\23\0\15\7"+
    "\1\372\16\7\23\0\15\7\1\373\16\7\23\0\12\7"+
    "\1\374\21\7\23\0\12\7\1\375\21\7\23\0\11\7"+
    "\1\376\22\7\23\0\15\7\1\377\16\7\23\0\12\7"+
    "\1\u0100\21\7\23\0\12\7\1\u0101\21\7\23\0\21\7"+
    "\1\u0102\12\7\23\0\7\7\1\u0103\24\7\23\0\13\7"+
    "\1\u0104\20\7\23\0\12\7\1\u0105\21\7\23\0\7\7"+
    "\1\u0106\24\7\23\0\23\7\1\u0107\10\7\23\0\33\7"+
    "\1\u0108\23\0\24\7\1\u0109\7\7\23\0\6\7\1\u010a"+
    "\25\7\23\0\12\7\1\u010b\21\7\23\0\23\7\1\u010c"+
    "\10\7\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9494];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\2\1\1\11\21\1\12\11"+
    "\1\1\1\11\1\1\1\11\2\1\1\0\45\1\5\11"+
    "\2\0\53\1\1\0\212\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2846) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return symbol(sym.UNKNOWN);
            }
          case 75: break;
          case 2: 
            { /* ignore */
            }
          case 76: break;
          case 3: 
            { return symbol(sym.IDENTIFIER);
            }
          case 77: break;
          case 4: 
            { return symbol(sym.INTEGER_LITERAL,new Integer(yytext()));
            }
          case 78: break;
          case 5: 
            { string.setLength(0); yybegin(STRING);
            }
          case 79: break;
          case 6: 
            { return symbol(sym.LPAREN);
            }
          case 80: break;
          case 7: 
            { return symbol(sym.RPAREN);
            }
          case 81: break;
          case 8: 
            { return symbol(sym.LBRACE);
            }
          case 82: break;
          case 9: 
            { return symbol(sym.RBRACE);
            }
          case 83: break;
          case 10: 
            { return symbol(sym.LBRACK);
            }
          case 84: break;
          case 11: 
            { return symbol(sym.RBRACK);
            }
          case 85: break;
          case 12: 
            { return symbol(sym.SEMICOLON);
            }
          case 86: break;
          case 13: 
            { return symbol(sym.COMMA);
            }
          case 87: break;
          case 14: 
            { return symbol(sym.DOT);
            }
          case 88: break;
          case 15: 
            { return symbol(sym.EQ);
            }
          case 89: break;
          case 16: 
            { return symbol(sym.PLUS);
            }
          case 90: break;
          case 17: 
            { string.append( yytext() );
            }
          case 91: break;
          case 18: 
            { yybegin(YYINITIAL); 
                                   return symbol(sym.STRING_LITERAL, 
                                   string.toString());
            }
          case 92: break;
          case 19: 
            { string.append('\\');
            }
          case 93: break;
          case 20: 
            { return symbol(sym.IF);
            }
          case 94: break;
          case 21: 
            { return symbol(sym.DO);
            }
          case 95: break;
          case 22: 
            { return symbol(sym.EQEQ);
            }
          case 96: break;
          case 23: 
            { string.append('\t');
            }
          case 97: break;
          case 24: 
            { string.append('\r');
            }
          case 98: break;
          case 25: 
            { string.append('\n');
            }
          case 99: break;
          case 26: 
            { string.append('\"');
            }
          case 100: break;
          case 27: 
            { return symbol(sym.TRY);
            }
          case 101: break;
          case 28: 
            { return symbol(sym.NEW);
            }
          case 102: break;
          case 29: 
            { return symbol(sym.INT);
            }
          case 103: break;
          case 30: 
            { return symbol(sym.FOR);
            }
          case 104: break;
          case 31: 
            { return symbol(sym.BYTE);
            }
          case 105: break;
          case 32: 
            { return symbol(sym.THIS);
            }
          case 106: break;
          case 33: 
            { return symbol(sym.CASE);
            }
          case 107: break;
          case 34: 
            { return symbol(sym.CHAR);
            }
          case 108: break;
          case 35: 
            { return symbol(sym.ELSE);
            }
          case 109: break;
          case 36: 
            { return symbol(sym.ENUM);
            }
          case 110: break;
          case 37: 
            { return symbol(sym.LONG);
            }
          case 111: break;
          case 38: 
            { return symbol(sym.GOTO);
            }
          case 112: break;
          case 39: 
            { return symbol(sym.VOID);
            }
          case 113: break;
          case 40: 
            { return symbol(sym.BREAK);
            }
          case 114: break;
          case 41: 
            { return symbol(sym.SHORT);
            }
          case 115: break;
          case 42: 
            { return symbol(sym.SUPER);
            }
          case 116: break;
          case 43: 
            { return symbol(sym.THROW);
            }
          case 117: break;
          case 44: 
            { return symbol(sym.CATCH);
            }
          case 118: break;
          case 45: 
            { return symbol(sym.CONST);
            }
          case 119: break;
          case 46: 
            { return symbol(sym.CLASS);
            }
          case 120: break;
          case 47: 
            { return symbol(sym.FLOAT);
            }
          case 121: break;
          case 48: 
            { return symbol(sym.FINAL);
            }
          case 122: break;
          case 49: 
            { return symbol(sym.WHILE);
            }
          case 123: break;
          case 50: 
            { return symbol(sym.ASSERT);
            }
          case 124: break;
          case 51: 
            { return symbol(sym.STATIC);
            }
          case 125: break;
          case 52: 
            { return symbol(sym.SWITCH);
            }
          case 126: break;
          case 53: 
            { return symbol(sym.THROWS);
            }
          case 127: break;
          case 54: 
            { return symbol(sym.RETURN);
            }
          case 128: break;
          case 55: 
            { return symbol(sym.NATIVE);
            }
          case 129: break;
          case 56: 
            { return symbol(sym.IMPORT);
            }
          case 130: break;
          case 57: 
            { return symbol(sym.DOUBLE);
            }
          case 131: break;
          case 58: 
            { return symbol(sym.PUBLIC);
            }
          case 132: break;
          case 59: 
            { return symbol(sym.BOOLEAN);
            }
          case 133: break;
          case 60: 
            { return symbol(sym.EXTENDS);
            }
          case 134: break;
          case 61: 
            { return symbol(sym.DEFAULT);
            }
          case 135: break;
          case 62: 
            { return symbol(sym.FINALLY);
            }
          case 136: break;
          case 63: 
            { return symbol(sym.PACKAGE);
            }
          case 137: break;
          case 64: 
            { return symbol(sym.PRIVATE);
            }
          case 138: break;
          case 65: 
            { return symbol(sym.ABSTRACT);
            }
          case 139: break;
          case 66: 
            { return symbol(sym.STRICTFP);
            }
          case 140: break;
          case 67: 
            { return symbol(sym.CONTINUE);
            }
          case 141: break;
          case 68: 
            { return symbol(sym.VOLATILE);
            }
          case 142: break;
          case 69: 
            { return symbol(sym.TRANSIENT);
            }
          case 143: break;
          case 70: 
            { return symbol(sym.INTERFACE);
            }
          case 144: break;
          case 71: 
            { return symbol(sym.PROTECTED);
            }
          case 145: break;
          case 72: 
            { return symbol(sym.INSTANCEOF);
            }
          case 146: break;
          case 73: 
            { return symbol(sym.IMPLEMENTS);
            }
          case 147: break;
          case 74: 
            { return symbol(sym.SYNCHRONIZED);
            }
          case 148: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
